{
  "name": "jugglingdb",
  "description": "ORM for every database: redis, mysql, neo4j, mongodb, couchdb, postgres, sqlite",
  "version": "0.2.0-17",
  "author": {
    "name": "Anatoliy Chakkaev",
    "email": "rpm1602@gmail.com"
  },
  "contributors": [
    {
      "name": "Anatoliy Chakkaev",
      "email": "rpm1602@gmail.com"
    },
    {
      "name": "Julien Guimont",
      "email": "julien.guimont@gmail.com"
    },
    {
      "name": "Joseph Junker",
      "email": "joseph.jnk@gmail.com"
    },
    {
      "name": "Henri Bergius",
      "email": "henri.bergius@iki.fi"
    },
    {
      "name": "redvulps",
      "email": "fabopereira@gmail.com"
    },
    {
      "name": "Felipe Sateler",
      "email": "fsateler@gmail.com"
    },
    {
      "name": "Amir M. Mahmoudi",
      "email": "a@geeknux.com"
    },
    {
      "name": "Justinas Stankevičius",
      "email": "justinas@justinas.me"
    },
    {
      "name": "Rick O'Toole",
      "email": "patrick.n.otoole@gmail.com"
    },
    {
      "name": "Nicholas Westlake",
      "email": "nicholasredlin@gmail.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/1602/jugglingdb"
  },
  "main": "index.js",
  "scripts": {
    "test": "nodeunit test/*_test*"
  },
  "engines": [
    "node >= 0.6"
  ],
  "devDependencies": {
    "semicov": "*",
    "nodeunit": ">= 0.6.4",
    "coffee-script": "latest"
  },
  "readme": "## About [<img src=\"https://secure.travis-ci.org/1602/jugglingdb.png\" />](http://travis-ci.org/#!/1602/jugglingdb)\n\nJugglingDB is cross-db ORM for nodejs, providing **common interface** to access\nmost popular database formats.  Currently supported are: mysql, sqlite3,\npostgres, couchdb, mongodb, redis, neo4j and js-memory-storage (yep,\nself-written engine for test-usage only). You can add your favorite database\nadapter, checkout one of the existing adapters to learn how, it's super-easy, I\nguarantee.\n\nJugglingdb also works on client-side (using WebService and Memory adapters),\nwhich allows to write rich client-side apps talking to server using JSON API.\n\n## Installation\n\n    npm install jugglingdb\n\nplus you should install appropriated adapter, for example for redis:\n\n    npm install jugglingdb-redis\n\ncheck following list of available adapters\n\n## JugglingDB adapters\n\n<table>\n  <thead>\n    <tr>\n      <th>Database type</th>\n      <th>Package name</th>\n      <th>Maintainer</th>\n      <th>Build status</th>\n    </tr>\n  </thead>\n  <tbody>\n    <!-- Firebird -->\n    <tr>\n      <td><a href=\"http://firebirdsql.org\"><img src=\"http://firebirdsql.org/favicon.ico\" alt=\"Firebird\"/></a> Firebird</td>\n      <td><a href=\"http://github.com/hgourvest/jugglingdb-firebird\">jugglingdb-firebird</a></td>\n      <td><a href=\"http://github.com/hgourvest\">Henri Gourvest</a></td>\n      <td></td>\n    </tr>\n\n    <!-- MongoDB -->\n    <tr>\n      <td><a href=\"http://www.mongodb.org\"><img src=\"http://mongodb.ru/favicon.ico\" alt=\"MongoDB\" /></a> MongoDB</td>\n      <td><a href=\"/1602/jugglingdb-mongodb\">jugglingdb-mongodb</a></td>\n      <td><a href=\"/anatoliychakkaev\">Anatoliy Chakkaev</a></td>\n      <td><a href=\"https://travis-ci.org/1602/jugglingdb-mongodb\"><img src=\"https://travis-ci.org/1602/jugglingdb-mongodb.png?branch=master\" alt=\"Build Status\" /></a></td>\n    </tr>\n\n    <!-- MySQL -->\n    <tr>\n      <td><a href=\"http://www.mysql.com/\"><img src=\"/1602/jugglingdb/raw/master/media/mysql.ico\" style=\"vertical-align:middle\"\" alt=\"MySQL\" /></a> MySQL</td>\n      <td><a href=\"/1602/jugglingdb-mysql\">jugglingdb-mysql</a></td>\n      <td><a href=\"/anatoliychakkaev\">Anatoliy Chakkaev</a></td>\n      <td><a href=\"https://travis-ci.org/1602/jugglingdb-mysql\"><img src=\"https://travis-ci.org/1602/jugglingdb-mysql.png?branch=master\" alt=\"Build Status\" /></a></td>\n    </tr>\n\n    <!-- CouchDB / nano -->\n    <tr>\n      <td><a href=\"http://couchdb.apache.org/\"><img width=\"16\" src=\"http://couchdb.apache.org/favicon.ico\" style=\"vertical-align:middle\"\" alt=\"CouchDB\" /></a> CouchDB / nano</td>\n      <td><a href=\"/1602/jugglingdb-nano\">jugglingdb-nano</a></td>\n      <td><a href=\"/nrw\">Nicholas Westlake</a></td>\n      <td><a href=\"https://travis-ci.org/1602/jugglingdb-nano\"><img src=\"https://travis-ci.org/1602/jugglingdb-nano.png?branch=master\" alt=\"Build Status\" /></a></td>\n    </tr>\n\n    <!-- PostgreSQL -->\n    <tr>\n      <td><a href=\"http://www.postgresql.org/\"><img src=\"http://www.postgresql.org/favicon.ico\" style=\"vertical-align:middle\"\" alt=\"PostgreSQL\" /></a> PostgreSQL</td>\n      <td><a href=\"/1602/jugglingdb-postgres\">jugglingdb-postgres</a></td>\n      <td><a href=\"/anatoliychakkaev\">Anatoliy Chakkaev</a></td>\n      <td><a href=\"https://travis-ci.org/1602/jugglingdb-postgres\"><img src=\"https://travis-ci.org/1602/jugglingdb-postgres.png?branch=master\" alt=\"Build Status\" /></a></td>\n    </tr>\n\n    <!-- Redis -->\n    <tr>\n      <td><a href=\"http://redis.io/\"><img src=\"http://redis.io/images/favicon.png\" alt=\"Redis\" /></a> Redis</td>\n      <td><a href=\"/1602/jugglingdb-redis\">jugglingdb-redis</a></td>\n      <td><a href=\"/anatoliychakkaev\">Anatoliy Chakkaev</a></td>\n      <td><a href=\"https://travis-ci.org/1602/jugglingdb-redis\"><img src=\"https://travis-ci.org/1602/jugglingdb-redis.png?branch=master\" alt=\"Build Status\" /></a></td>\n    </tr>\n\n    <!-- SQLite -->\n    <tr>\n      <td><a href=\"http://www.sqlite.org/\"><img width=\"16\" src=\"/1602/jugglingdb/raw/master/media/sqlite.png\" style=\"vertical-align:middle\"\" alt=\"SQLite\" /></a> SQLite</td>\n      <td><a href=\"/1602/jugglingdb-sqlite3\">jugglingdb-sqlite3</a></td>\n      <td><a href=\"/anatoliychakkaev\">Anatoliy Chakkaev</a></td>\n      <td><a href=\"https://travis-ci.org/1602/jugglingdb-sqlite3\"><img src=\"https://travis-ci.org/1602/jugglingdb-sqlite3.png?branch=master\" alt=\"Build Status\" /></a></td>\n    </tr>\n    <tr>\n      <td>WebService</td>\n      <td>built-in</td>\n      <td><a href=\"/anatoliychakkaev\">Anatoliy Chakkaev</a></td>\n      <td>n/a</td>\n    </tr>\n    <tr>\n      <td>Memory (bogus)</td>\n      <td>built-in</td>\n      <td><a href=\"/anatoliychakkaev\">Anatoliy Chakkaev</a></td>\n      <td>n/a</td>\n    </tr>\n    <tr>\n      <td>Neo4j</td>\n      <td>built-in</td>\n      <td><a href=\"/anatoliychakkaev\"><strike>Anatoliy Chakkaev</strike></a> /!\\ Looking for\n      maintainer</td>\n      <td>n/a</td>\n    </tr>\n\n  </tbody>\n</table>\n\n## Participation\n\n- Check status of project on trello board: https://trello.com/board/jugglingdb/4f0a0b1e27d3103c64288388\n- Make sure all tests pass (`npm test` command)\n- Feel free to vote and comment on cards (tickets/issues), if you want to join team -- send me a message with your email.\n\nIf you want to create your own jugglingdb adapter, you should publish your\nadapter package with name `jugglingdb-ADAPTERNAME`. Creating adapter is simple,\ncheck [jugglingdb-redis](/1602/jugglingdb-redis) for example. JugglingDB core\nexports common tests each adapter should pass, you could create your adapter in\nTDD style, check that adapter pass all tests defined in `test/common_test.js`.\n\n## Usage\n\n```javascript\nvar Schema = require('jugglingdb').Schema;\nvar schema = new Schema('redis', {port: 6379}); //port number depends on your configuration\n// define models\nvar Post = schema.define('Post', {\n    title:     { type: String, length: 255 },\n    content:   { type: Schema.Text },\n    date:      { type: Date,    default: Date.now },\n    published: { type: Boolean, default: false, index: true }\n});\n\n// simplier way to describe model\nvar User = schema.define('User', {\n    name:         String,\n    bio:          Schema.Text,\n    approved:     Boolean,\n    joinedAt:     Date,\n    age:          Number\n}, {\n    restPath: '/users' // tell WebService adapter which path use as API endpoint\n});\n\n// define any custom method\nUser.prototype.getNameAndAge = function () {\n    return this.name + ', ' + this.age;\n};\n\n// models also accessible in schema:\nschema.models.User;\nschema.models.Post;\n\n// setup relationships\nUser.hasMany(Post,   {as: 'posts',  foreignKey: 'userId'});\n// creates instance methods:\n// user.posts(conds)\n// user.posts.build(data) // like new Post({userId: user.id});\n// user.posts.create(data) // build and save\n\nPost.belongsTo(User, {as: 'author', foreignKey: 'userId'});\n// creates instance methods:\n// post.author(callback) -- getter when called with function\n// post.author() -- sync getter when called without params\n// post.author(user) -- setter when called with object\n\nschema.automigrate(); // required only for mysql NOTE: it will drop User and Post tables\n\n// work with models:\nvar user = new User;\nuser.save(function (err) {\n    var post = user.posts.build({title: 'Hello world'});\n    post.save(console.log);\n});\n\n// or just call it as function (with the same result):\nvar user = User();\nuser.save(...);\n\n// Common API methods\n\n// just instantiate model\nnew Post\n// save model (of course async)\nPost.create(cb);\n// all posts\nPost.all(cb)\n// all posts by user\nPost.all({where: {userId: user.id}, order: 'id', limit: 10, skip: 20});\n// the same as prev\nuser.posts(cb)\n// get one latest post\nPost.findOne({where: {published: true}, order: 'date DESC'}, cb);\n// same as new Post({userId: user.id});\nuser.posts.build\n// save as Post.create({userId: user.id}, cb);\nuser.posts.create(cb)\n// find instance by id\nUser.find(1, cb)\n// count instances\nUser.count([conditions, ]cb)\n// destroy instance\nuser.destroy(cb);\n// destroy all instances\nUser.destroyAll(cb);\n\n// Setup validations\nUser.validatesPresenceOf('name', 'email')\nUser.validatesLengthOf('password', {min: 5, message: {min: 'Password is too short'}});\nUser.validatesInclusionOf('gender', {in: ['male', 'female']});\nUser.validatesExclusionOf('domain', {in: ['www', 'billing', 'admin']});\nUser.validatesNumericalityOf('age', {int: true});\nUser.validatesUniquenessOf('email', {message: 'email is not unique'});\n\nuser.isValid(function (valid) {\n    if (!valid) {\n        user.errors // hash of errors {attr: [errmessage, errmessage, ...], attr: ...}    \n    }\n})\n\n```\n\n## Callbacks\n\nThe following callbacks supported:\n\n    - afterInitialize\n    - beforeCreate\n    - afterCreate\n    - beforeSave\n    - afterSave\n    - beforeUpdate\n    - afterUpdate\n    - beforeDestroy\n    - afterDestroy\n    - beforeValidation\n    - afterValidation\n\nEach callback is class method of the model, it should accept single argument: `next`, this is callback which\nshould be called after end of the hook. Except `afterInitialize` because this method is syncronous (called after `new Model`).\n\n## Object lifecycle:\n\n```javascript\nvar user = new User;\n// afterInitialize\nuser.save(callback);\n// beforeValidation\n// afterValidation\n// beforeSave\n// beforeCreate\n// afterCreate\n// afterSave\n// callback\nuser.updateAttribute('email', 'email@example.com', callback);\n// beforeValidation\n// afterValidation\n// beforeUpdate\n// afterUpdate\n// callback\nuser.destroy(callback);\n// beforeDestroy\n// afterDestroy\n// callback\nUser.create(data, callback);\n// beforeValidate\n// afterValidate\n// beforeCreate\n// afterCreate\n// callback\n```\n\nRead the tests for usage examples: ./test/common_test.js\nValidations: ./test/validations_test.js\n\n## Your own database adapter\n\nTo use custom adapter, pass it's package name as first argument to `Schema` constructor:\n\n    var mySchema = new Schema('mycouch', {host:.., port:...});\n\nIn that case your adapter should be named as 'jugglingdb-mycouch' npm package.\n\n## Testing\n\nCore of jugglingdb tests only basic features (database-agnostic) like\nvalidations, hooks and runs db-specific tests using memory storage. It also\nexports complete bucket of tests for external running. Each adapter should run\nthis bucket (example from `jugglingdb-redis`):\n\n    var jdb = require('jugglingdb'),\n    Schema = jdb.Schema,\n    test = jdb.test;\n\n    var schema = new Schema(__dirname + '/..', {host: 'localhost', database: 1});\n\n    test(module.exports, schema);\n\nEach adapter could add specific tests to standart bucket:\n\n    test.it('should do something special', function (test) {\n        test.done();\n    });\n\nOr it could tell core to skip some test from bucket:\n\n    test.skip('name of test case');\n\nTo run tests use this command:\n\n    npm test\n\nBefore running make sure you've installed package (`npm install`) and if you\nrunning some specific adapter tests, ensure you've configured database\ncorrectly (host, port, username, password).\n\n## Contributing\n\nIf you have found a bug please write unit test, and make sure all other tests still pass before pushing code to repo.\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "jugglingdb@0.2.0-17",
  "_from": "jugglingdb@*"
}
